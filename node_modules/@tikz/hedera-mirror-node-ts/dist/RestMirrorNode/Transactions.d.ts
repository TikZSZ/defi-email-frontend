import { filterKeys, HasMoreMirrorNode, BaseMirrorClient, OptionalFilters, TransactionType } from "./";
interface TransactionParams {
    [filterKeys.TRANSACTION_TYPE]: TransactionType;
    [filterKeys.ACCOUNT_ID]: OptionalFilters;
    [filterKeys.RESULT]: 'fail' | 'success';
    [filterKeys.CREDIT_TYPE]: 'credit' | 'debit';
}
export declare class Transactions extends HasMoreMirrorNode<TransactionParams, TransactionsResponse> {
    protected url: string;
    protected params: Partial<TransactionParams>;
    constructor(mirrorNodeClient: BaseMirrorClient, url: string, accountId?: string);
    static v1(mirrorNodeClient: BaseMirrorClient, accountId?: string): Transactions;
    setAccountId(val: OptionalFilters): this;
    setResult(val: TransactionParams['result']): this;
    setType(val: TransactionParams['type']): this;
    setTransactionType(val: TransactionParams['transactiontype']): this;
    get(): Promise<TransactionsResponse>;
}
export interface TransactionsResponse {
    transactions: Transaction[];
    links: Links;
}
interface Links {
    next: string;
}
interface Transaction {
    charged_tx_fee: number;
    consensus_timestamp: string;
    entity_id: string;
    max_fee: string;
    memo_base64: string;
    name: string;
    node: string;
    nonce: number;
    result: string;
    scheduled: boolean;
    bytes?: any;
    transaction_hash: string;
    transaction_id: string;
    transfers: Transfer[];
    valid_duration_seconds: string;
    valid_start_timestamp: string;
}
interface Transfer {
    account: string;
    amount: number;
}
export {};
