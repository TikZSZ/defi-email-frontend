import { BaseMirrorClient, HasMoreMirrorNode, filterKeys, OptionalFilters } from "..";
interface TokenBalanceParams {
    [filterKeys.ACCOUNT_PUBLICKEY]: string;
    [filterKeys.ACCOUNT_ID]: OptionalFilters;
    [filterKeys.ACCOUNT_BALANCE]: OptionalFilters;
}
export declare class TokenBalances extends HasMoreMirrorNode<TokenBalanceParams, TokenBalanceResponse> {
    protected url: string;
    protected params: Partial<TokenBalanceParams>;
    private tokenId;
    constructor(mirrorClient: BaseMirrorClient, url: string, tokenId?: string);
    static v1(mirrorClient: BaseMirrorClient, tokenId?: string): TokenBalances;
    setPublicKey(val: TokenBalanceParams['account.publickey']): this;
    setAccountBalance(val: TokenBalanceParams['account.balance']): this;
    setAccountId(val: TokenBalanceParams['account.id']): this;
    setTokenId(val: string): this;
    get(): Promise<TokenBalanceResponse>;
}
export interface TokenBalanceResponse {
    timestamp: string;
    balances: Balance[];
    links: Links;
}
interface Links {
    next?: string;
}
interface Balance {
    account: string;
    balance: number;
}
export {};
