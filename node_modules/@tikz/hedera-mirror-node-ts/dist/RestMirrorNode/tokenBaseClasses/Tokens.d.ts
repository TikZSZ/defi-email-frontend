import { filterKeys, OptionalFilters, BaseMirrorClient, HasMoreMirrorNode, TokenTypeFilter } from "..";
interface TokenParams {
    [filterKeys.TOKEN_ID]: OptionalFilters;
    [filterKeys.ACCOUNT_PUBLICKEY]: string;
    [filterKeys.ACCOUNT_ID]: OptionalFilters;
    [filterKeys.TOKEN_TYPE]: TokenTypeFilter;
}
export declare class Tokens extends HasMoreMirrorNode<TokenParams, TokensResponse> {
    protected url: string;
    protected params: Partial<TokenParams>;
    constructor(mirrorClient: BaseMirrorClient, url: string);
    static v1(mirrorClient: BaseMirrorClient): Tokens;
    setPublicKey(val: TokenParams['account.publickey']): this;
    setTokenId(val: TokenParams['token.id']): this;
    setTokenType(val: TokenParams['type']): this;
    setAccountId(val: TokenParams['account.id']): this;
    get(): Promise<TokensResponse>;
}
export interface TokensResponse {
    tokens: Token[];
    links: Links;
}
interface Links {
    next?: string;
}
interface Token {
    admin_key?: Adminkey;
    symbol: string;
    token_id: string;
    type: string;
}
interface Adminkey {
    _type: string;
    key: string;
}
export {};
