import { filterKeys, BaseMirrorClient, OptionalFilters, HasMoreMirrorNode, TransactionType } from "./";
interface AccountParams {
    [filterKeys.TRANSACTION_TYPE]: TransactionType;
    [filterKeys.ACCOUNT_ID]: OptionalFilters;
    [filterKeys.ACCOUNT_PUBLICKEY]: OptionalFilters;
    [filterKeys.ACCOUNT_BALANCE]: OptionalFilters;
}
export declare class Accounts extends HasMoreMirrorNode<AccountParams, AccountsResponse> {
    protected url: string;
    protected params: Partial<AccountParams>;
    constructor(mirrorNodeClient: BaseMirrorClient, url: string, accountId?: string);
    /**
     * returns Accounts Mirror Client with version 1
     */
    static v1(mirrorNodeClient: BaseMirrorClient, accountId?: string): Accounts;
    setBalance(val: AccountParams["account.balance"]): this;
    setAccountId(val: AccountParams["account.id"]): this;
    setPublicKey(val: AccountParams["account.publickey"]): this;
    setTransactionType(val: AccountParams["transactiontype"]): this;
    get(): Promise<AccountsResponse>;
}
interface AccountsResponse {
    accounts: Account[];
    links: Links;
}
interface Links {
    next: string;
}
interface Account {
    account: string;
    auto_renew_period?: any;
    balance: Balance;
    deleted: boolean;
    expiry_timestamp?: any;
    key?: any;
    max_automatic_token_associations: number;
    memo: string;
    receiver_sig_required?: any;
}
interface Balance {
    balance: number;
    timestamp: string;
    tokens: Token[];
}
interface Token {
    token_id: string;
    balance: number;
}
export {};
