import { filterKeys } from "./helpers/filterKeys";
import { BaseMirrorClient, OptionalFilters } from "./";
import { HasMoreMirrorNode } from "./baseClasses/HasMoreMirrorNode";
interface SmartContractsParams {
    [filterKeys.CONTRACT_ID]: OptionalFilters;
}
export declare class SmartContracts extends HasMoreMirrorNode<SmartContractsParams, ContractResponse> {
    protected url: string;
    private topicId?;
    protected params: Partial<SmartContractsParams>;
    constructor(mirrorNodeClient: BaseMirrorClient, url: string, topicId?: string | undefined);
    static v1(mirrorNodeClient: BaseMirrorClient, topicId?: string): SmartContracts;
    setSmartContractId(val: SmartContractsParams['contract.id']): this;
    get(): Promise<ContractResponse>;
}
export interface ContractResponse {
    contracts: Contract[];
    links: Links;
}
interface Links {
    next: string;
}
interface Contract {
    admin_key: Adminkey;
    auto_renew_period: number;
    contract_id: string;
    created_timestamp: string;
    deleted: boolean;
    expiration_timestamp?: any;
    file_id: string;
    memo: string;
    obtainer_id?: any;
    proxy_account_id?: any;
    solidity_address: string;
    timestamp: Timestamp;
}
interface Timestamp {
    from: string;
    to?: any;
}
interface Adminkey {
    _type: string;
    key: string;
}
export {};
