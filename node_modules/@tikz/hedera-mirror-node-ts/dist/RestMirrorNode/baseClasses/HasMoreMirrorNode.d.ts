import { OptionalFilters } from "..";
import { BaseMirrorNode } from "./BaseMirrorNode";
interface Response {
    [k: string]: any;
    links?: {
        next?: string;
    };
}
export declare abstract class HasMoreMirrorNode<P, D extends Response> extends BaseMirrorNode<D> {
    private nextLink?;
    private basicParams;
    protected abstract params: Partial<P>;
    protected fetch: <T extends Response = D>(url: string) => Promise<T>;
    order(order: "asc" | "desc"): this;
    setLimit(limit: number): this;
    timestamp(timestamp: OptionalFilters): this;
    protected get completeParams(): {
        order?: "asc" | "desc" | undefined;
        limit?: number | undefined;
        timestamp?: string | undefined;
    } & Partial<P>;
    next(): Promise<D | null>;
}
export {};
