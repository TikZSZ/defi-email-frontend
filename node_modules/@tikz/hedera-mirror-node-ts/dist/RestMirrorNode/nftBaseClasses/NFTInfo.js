"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NFTInfo = void 0;
const __1 = require("../");
const _1 = require(".");
class NFTInfo extends __1.BaseMirrorNode {
    constructor(mirrorClient, url, tokenId, serialNumber) {
        super(mirrorClient);
        this.url = url;
        this.tokenId = '';
        this.serialNumber = 1;
        if (tokenId)
            this.tokenId = tokenId;
        if (serialNumber)
            this.serialNumber = serialNumber;
    }
    static v1(mirrorClient, tokenId, serialNumber) {
        return new this(mirrorClient, `/api/v1/tokens`, tokenId, serialNumber);
    }
    setTokenId(val) {
        this.tokenId = val;
        return this;
    }
    setSerialNumber(val) {
        this.serialNumber = val;
        return this;
    }
    get() {
        if (!this.tokenId || !this.setSerialNumber)
            throw new Error('token id or serial number not set');
        return this.fetch(`${this.url}/${this.tokenId}/nfts/${this.serialNumber}`);
    }
    get getNFTTransactionHistory() {
        return new _1.NFTTransactionHistory(this.mirrorClient, this.url, this.tokenId, this.serialNumber);
    }
}
exports.NFTInfo = NFTInfo;
